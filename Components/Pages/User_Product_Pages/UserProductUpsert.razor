@page "/userproducts/create"
@page "/userproducts/update/{id:int}"

@inject IUserProductRepository _userProductRepository
@inject IProductRepository _productRepository
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime _js


@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView Context="authContext">
        <Authorized>
            @if (IsMember)
            {
                <div class="card shadow border-0 mt-4">
                    <div class="card-header bg-black bg-gradient m-lg-0 py-3">
                        <div class="row">
                            <div class="col-12 text-center">
                                <h2 class="text-white py-2">@(Id == 0 ? "Create" : "Update")</h2>
                            </div>
                        </div>
                    </div>

                    <div class="card-body p-4">

                        <EditForm Model="userProduct" FormName="UserProductUpsertMemberForm" OnValidSubmit="UpsertUserProduct">
                            <DataAnnotationsValidator />
                            
                            <div>
                                <ValidationSummary />
                            </div>

                            
                            <div class="border p-3 mt-4">

                                <!-- Product -->
                                <div class="form-floating py-3 col-12">
                                    <InputSelect @bind-Value="userProduct.ProductId" class="form-select" id="ProductId">
                                        @foreach (Product product in products)
                                        {
                                            <option value="@product.Id">@product.Name</option>
                                        }
                                    </InputSelect>
                                    <label for="Product">Product</label>
                                    <ValidationMessage For="@(() => userProduct.ProductId)" />
                                </div>

                                <!-- Amount -->
                                <div class="form-floating py-3 col-12">
                                    <InputNumber @bind-Value="userProduct.Amount" class="form-control" id="Amount" />
                                    <label for="Amount">Amount</label>
                                    <ValidationMessage For="@(() => userProduct.Amount)"/>
                                </div>

                                <!-- Buttons -->
                                <div class="row mt-3">
                                    <div class="col-6 col-md-3">
                                        <button type="submit" class="btn btn-primary form-control" disabled="@IsLoading">
                                            <i class="bi bi-save"></i> Save
                                        </button>
                                    </div>
                                    <div class="col-6 col-md-3">
                                        <a href="userjobs" class="btn btn-secondary form-control" disabled="@IsLoading">
                                            <i class="bi bi-arrow-bar-left"></i> Cancel
                                        </a>
                                    </div>
                                </div>

                            </div>


                        </EditForm>

                    </div>
                </div>
            }
            else 
            {
                <div class="card shadow border-0 mt-4">
                    <div class="card-header bg-black bg-gradient m-lg-0 py-3">
                        <div class="row">
                            <div class="col-12 text-center">
                                <h2 class="text-white py-2">@(Id == 0 ? "Create" : "Update")</h2>
                            </div>
                        </div>
                    </div>

                    <div class="card-body p-4">

                        <EditForm Model="userProduct" FormName="UserProductUpsertMemberForm" OnValidSubmit="UpsertUserProduct">
                            <DataAnnotationsValidator />

                            <div>
                                <ValidationSummary />
                            </div>


                            <div class="border p-3 mt-4">

                                <!-- Product -->
                                <div class="form-floating py-3 col-12">
                                    <InputSelect @bind-Value="userProduct.ProductId" class="form-select" id="ProductId">
                                        @foreach (Product product in products)
                                        {
                                            <option value="@product.Id">@product.Name</option>
                                        }
                                    </InputSelect>
                                    <label for="Product">Product</label>
                                    <ValidationMessage For="@(() => userProduct.ProductId)" />
                                </div>

                                <!-- Amount -->
                                <div class="form-floating py-3 col-12">
                                    <InputNumber @bind-Value="userProduct.Amount" class="form-control" id="Amount" />
                                    <label for="Amount">Amount</label>
                                    <ValidationMessage For="@(() => userProduct.Amount)" />
                                </div>

                                <!-- User -->
                                <div class="form-floating py-3 col-12">
                                    <InputSelect @bind-Value="userProduct.UserId" class="form-select" id="UserId">
                                        @foreach (ApplicationUser user in users)
                                        {
                                            <option value="@user.Id">@user.FirstName @user.LastName</option>
                                        }
                                    </InputSelect>
                                    <label for="User">User</label>
                                    <ValidationMessage For="@(() => userProduct.UserId)" />
                                </div>

                                <!-- Buttons -->
                                <div class="row mt-3">
                                    <div class="col-6 col-md-3">
                                        <button type="submit" class="btn btn-primary form-control" disabled="@IsLoading">
                                            <i class="bi bi-save"></i> Save
                                        </button>
                                    </div>
                                    <div class="col-6 col-md-3">
                                        <a href="userjobs" class="btn btn-secondary form-control" disabled="@IsLoading">
                                            <i class="bi bi-arrow-bar-left"></i> Cancel
                                        </a>
                                    </div>
                                </div>

                            </div>


                        </EditForm>

                    </div>
                </div>
            }
        </Authorized>
    </AuthorizeView>
}


@code {
    private AuthenticationState? authContext => AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
    private ApplicationUser identityUser { get; set; }

    public bool IsMember { get; set; } = true;

    [Parameter]
    public int Id { get; set; } = 0;

    public bool IsLoading { get; set; } = true;

    [SupplyParameterFromForm]
    public UserProduct userProduct { get; set; } = new UserProduct();

    public IEnumerable<Product> products { get; set; } = new List<Product>();
    public IEnumerable<ApplicationUser> users { get; set; } = new List<ApplicationUser>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            var user = authContext.User;
            var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;

            IsMember = authenticated && user.IsInRole(SD.Role_Member);


            await LoadUserProduct();
            await LoadProducts();
            await LoadUsers();

            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts() 
    {
        products = await _productRepository.GetAllProductsAsync();
    }

    private async Task LoadUsers()
    {
        await Task.Run(() =>
        {
            users = UserManager.Users.ToList();
        });
    }

    private async Task LoadUserProduct()
    {
        if ( Id != 0 ) 
        {
            userProduct = await _userProductRepository.GetUserProductByIdAsync(Id);
        }
        else 
        {
            // Setup the default user for member inputs!!
            var user = authContext?.User;
            identityUser = await UserManager.GetUserAsync(user);
            userProduct.UserId = identityUser?.Id;
        }
    }

    private async Task UpsertUserProduct()
    {
        IsLoading = true;

        if (userProduct.UserId is null)
        {
            var user = authContext?.User;
            var identityUser = await UserManager.GetUserAsync(user);
            userProduct.UserId = identityUser?.Id;
        }

        if (Id == 0)
        {
            await _userProductRepository.CreateUserProductAsync(userProduct);
            await _js.ToastrSuccess("UserProduct created successfully!");

        }
        else
        {
            await _userProductRepository.UpdateUserProductAsync(userProduct);
            await _js.ToastrSuccess("UserProduct saved successfully!");
        }

        IsLoading = false;

        _navigationManager.NavigateTo("userproducts");
    }

}
