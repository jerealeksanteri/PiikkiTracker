@page "/"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Home</PageTitle>

@if (IsLoading){
    <p><em>Loading...</em></p>
} else {
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Welcome to TabTracker!</h2>
                </div>
            </div>
        </div>
        <div class="row">

            <AuthorizeView>
                <Authorized>
                    <div class="col-md-6">
                        <div class="card m-4">
                            <div class="card-body">
                                <h4 class="card-title mb-4">Actions</h4>
                                <hr/>
                                <div class="card-text mb-2">
                                    <a href="userjobs/create" class="btn btn-sm btn-primary">
                                        <i class="bi bi-plus-square"></i> Log a new Job done
                                    </a>
                                </div>

                                <div class="card-text mb-2">
                                    <a href="userproducts/create" class="btn btn-sm btn-success">
                                        <i class="bi bi-plus-square"></i> Log a new Product in Tab
                                    </a>
                                </div>

                                <div class="card-text mb-2">
                                    <a href="transactions/create" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-cash-coin"></i> Transfer Money
                                    </a>
                                </div>
                            </div>
                        </div>
                        
                    </div>
                    
                    <!-- Tab Balance -->
                    <div class="col-md-6">
                        <div class="card m-4">
                            <div class="card-body">
                                <h4 class="card-title mb-4">Tab</h4>
                                <hr/>
                                <div class="card-text mb-4">
                                    <h5>Account Balance: </h5>
                                    
                                    <h2>@(user?.GetBalance()) €</h2>
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (user is not null)
                    {
                        <!-- Balance Chart -->
                        <div class="col-md-6">
                            <div class="card m-4">
                                <div class="card-body">
                                    <h4 class="card-title mb-4">Balance Over Time</h4>
                                    <hr/>
                                    <PiikkiTracker.Components.Pages.Charts.TabChart UserData="user"/>
                                </div>
                            </div>
                        </div>


                        <!-- Purchases Chart -->
                        <div class="col-md-6">
                            <div class="card m-4">
                                <div class="card-body">
                                    <h4 class="card-title mb-4">Purchases by Product</h4>
                                    <hr/>
                                    <PiikkiTracker.Components.Pages.Charts.UserProductsChart ProductData="user.UserProducts"/>
                                </div>
                            </div>
                        </div>
                    }
                    
                    
                </Authorized>
                <NotAuthorized>
                    <div class="card-body">
                        <p class="p-4"><em>Continue to sign in!</em></p>
                    </div>

                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    public bool IsLoading = true;

    public ApplicationUser? user = null;

    // Use OnInitializedAsync for loading data before the first render.
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;

        if (principal?.Identity?.IsAuthenticated ?? false)
        {
            var userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);

            // This single, efficient query gets ALL data needed for the page and its charts.
            user = await UserManager.Users
                .AsNoTracking()
                .Where(u => u.Id == userId)
                .Include(u => u.Transactions)
                .Include(u => u.UserJobs)
                    .ThenInclude(uj => uj.Job)
                .Include(u => u.UserProducts)
                    .ThenInclude(up => up.Product)
                .FirstOrDefaultAsync();
        }

        IsLoading = false;
    }

}