@page "/transactions/administration"
@using Microsoft.AspNetCore.Identity
@using PiikkiTracker.Utility
@using System.Timers;
@inject UserManager<ApplicationUser> UserManager
@inject ITransactionRepository _transactionRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime _js

<PageTitle>Transaction Administration</PageTitle>
<PiikkiTracker.Components.Shared.BsDeleteModal OnModalConfirmation="ConfirmDelete_Click"></PiikkiTracker.Components.Shared.BsDeleteModal>

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Transactions Administration</h2>
                </div>
            </div>
        </div>

        <AuthorizeView Context="authContext" Roles="@SD.Role_Admin">
            <Authorized>

                <div class="card-body p-4">

                    <label for="Search">Search:</label>
                    <InputText class="form-control mb-4" @bind-Value="searchTerm" @oninput="HandleInput" id="Search" placeholder="Type to search..."/>

                    @if (transactions.Any())
                    {
                        <table class="table table-bordered table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>User</th>
                                    <th>Email</th>
                                    <th>Amount</th>
                                    <th>Type</th>
                                    <th>CreatedDate</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (Transaction tr in transactions)
                                {
                                    <tr>
                                        <td>@tr.User?.FirstName @tr.User?.LastName</td>
                                        <td>@tr.User?.Email</td>
                                        <td>@tr.Amount</td>
                                        <td>@tr.TransactionType</td>
                                        <td>@tr.CreatedDate</td>
                                        <td>
                                            <a class="btn btn-sm btn-primary" href="@($"transactions/update/{tr.Id}")">Edit</a>
                                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => HandleDelete(tr.Id)">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No Transactions found</p>
                    }
                </div>
            </Authorized>

            <NotAuthorized>
                <p><em>Not authorized</em></p>
            </NotAuthorized>

        </AuthorizeView>
    </div>
}

@code {
    public string searchTerm { get; set; } = "";
    public bool IsLoading { get; set; } = true;
    private int TransactionID { get; set; } = 0;

    private CancellationTokenSource? _cts;

    public IEnumerable<Transaction> transactions = new List<Transaction>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTransactions();
            IsLoading = false;
            StateHasChanged();
        }
    }


    private async Task LoadTransactions()
    {
        transactions = await _transactionRepository.GetAllTransactionsAsync();
    }

    private async Task SearchTransactions(string searchTerm)
    {
        transactions = await _transactionRepository.QueryTransactions(searchTerm);
    }

    private void HandleDelete(int id)
    {
        TransactionID = id;
        // Show the modal
        _js.InvokeVoidAsync("ShowDeletionModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;

        if (isConfirmed && TransactionID != 0)
        {
            var result = await _transactionRepository.DeleteTransactionAsync(TransactionID);
            if (result)
            {
                _js?.ToastrSuccess("Transaction Deleted Successfully");
            }
            else
            {
                _js?.ToastrError("There was an error while deleting");
            }

            _js?.InvokeVoidAsync("HideDeletionModal");
            await LoadTransactions();

        }

        TransactionID = 0;
        IsLoading = false;


    }

    public async Task HandleInput(ChangeEventArgs eventArgs)
    {

        searchTerm = eventArgs.Value?.ToString();

        // Cancel tasks
        _cts?.Cancel();
        _cts = new CancellationTokenSource();

        // Debounce: 1000ms
        try
        {
            await Task.Delay(1000, _cts.Token);
        }
        catch (TaskCanceledException)
        {
            return;
        }

        // If empty search
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadTransactions();
        }
        else
        { 
            // Execute search
            await SearchTransactions(searchTerm);
        }
        
        StateHasChanged(); // Ensure UI updates

    }
}
